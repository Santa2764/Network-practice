Отправка E-mail. SMTP (Simple Mail Transport Protocol)
Общая схема:
               письмо
Почтовый     ---------->  Почтовый  <----------------> Клиент
сервер (Gmail)            сервер (gmail.com)           (пользователь)
            \           /
     SMTP    \         x  (напрямую почту отправить нельзя)
    (send)    \       /
             [программа]
           данные для листа

Аутентификационные данные (пароли подключения) следует организовывать так, чтобы они не распрасранялись (не хранить в: репозитории, архивы кодов, и тд).
В то же время, может быть возможность введения этих данных в новой инсталяции проекта (пароли не в коде, а в файлах, которые скрыты, например .gitignore).
Шаги правильной реализации хранения таких данных:
- добавляем к проекту новый файл "email-settings.json"
  как правило, он автоматически добавляется в гит, поэтому его следует достать из репозитория.
  Добавить в .gitignore
- убеждаемся, что файл не передаётся в репозиторий (git status -s),
  если он есть, удаляем из хэшируемых данных (git rm --cached email-settings.json).
- до заполнения файла, лучше сделать комит и ещё раз убедиться, что он не включился в репозиторий.
- создаём файл-пример, который за структорой будет такой же самый, как и основная конфигурация, но без
  паролей (заменнёных на *******) - email-settings-sample.json
  это файл будет на гитхабе.
- к инструкции программы добаляем пункт про необходимость перемеинование файла и замены у него данных.
- в свойствах json файла, выбрать пункт "copy to output directory" значение "copy always"

Нужно в google-аккаунте добавить 2-ух факторную верификацию. И в самом низу, получить пароль для приложения.

Почтовые клиенты потдерживают разные форматы уведомлений, в том числе HTML.
Это позволяет улучшить оформление и включать к письму ссылки.
Для того, чтобы HTML отображался в письме должен быть указанный определённый тип, который включается способами
MailMessage (IsBodyHtml = true). Поэтому, такие письма формируются не простой командой Send(), а до этого настроинными
объектом-сообщением классом MailMessage.

Также листы могут иметь вложение (attachments), которые тоже добавляются через объект MailMessage.
За политикой безопасности письма для вложений следует обозначать MIME-тип (ContentType).
Это унифицированная характеристика контента, обозначена стандартами (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types)
Не обозначенный тип или нестандартное выражение могут привести к отказу отправки данных (это касается не только почты).

///////////////////////////////////////////////

Использование кодов для подтверждения почты.
Идея:
пользователь регистрируется, вводит почту.
на почту отправляется код и этот же код добавляется к БД с другими данными пользователя.
пользователь входит в аккаунт, возможно, намного позже, возможно, с другого устройства -
  сохраннёный в БД код будет фактом неподтверждённой почты и также возможность его проверки.
  И наоборот - отсутствие кода означает подтверждённую почту.

///////////////////////////////////////////////

"Environment" (переменные окружения) в C# (своими руками)
Чтобы можно было получать доступ к значениям, которые нужны всему проекту и классам:
string host = App.GetConfiguration("smtp:email")  // пример использования
1. делаем в json все значения типа string
2. пишем метод:
  private static JsonElement? settings = null;
  public static string? GetConfiguration(string name)
  {
      // проверка существует ли файл json

      // преобразовываем весь текст из json в тип JsonElement (в try-catch)
      settings ??= JsonSerializer.Deserialize<JsonElement>(File.ReadAllText(configFilename));

      JsonElement? jsonElement = settings;
      if (settings is not null)
      {
          try
          {
              foreach (string key in name.Split(':'))  // цикл, потому что в json может быть вложенность ("smtp:host")
              {
                  jsonElement = jsonElement?.GetProperty(key);
              }
          }
          catch { return null; }
          return jsonElement?.GetString();
      }
      return null;
  }
