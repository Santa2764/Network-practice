HTTP (HyperText Transfer Protocol) - протокол передачи гипертекста

Исторически - протокол для HTML, с развитием - общий протокол передачи данных, в том числе файлов.
Протокол прикладной (базируется на отработанном транспортном протоколе),
для него данные уже представленны в виде текста.

Структура (HTTP-пакет) зависит от того запрос это или ответ
Запрос (Request):
--------------------------------------------------
POST /shop/product?id=123  HTTP/1.1               \r\n
Host: my.shop.net                                 \r\n
Connection: close                                 \r\n
Content-Type: application/json;charset=UTF-8      \r\n
                                                  \r\n
{"user-id": "123456789", "timestamp": 98755156554}\EOF
--------------------------------------------------
POST - метод запроса - первое слово в пакете.
Стандартизируется - есть установленный список разрешённых методов.

/shop/product?id=123  HTTP/1.1  -  Path, URL(не корректно)
?id=123 - Query String(QS), URL-параметры или GET-параметры
HTTP/1.1 - схема или протокол и его версия
Далее идут заголовки - Ключ: значение;атрибуты - по одному в строке
пустая строка
Тело запроса до конца пакета - произвольный контент.


Ответ (Response):
--------------------------------------------------
HTTP/1.1 200 OK                                   \r\n
Host: my.shop.net                                 \r\n
Connection: close                                 \r\n
Content-Type: application/json;charset=UTF-8      \r\n
                                                  \r\n
{"user-id": "123456789", "timestamp": 98755156554}\EOF
--------------------------------------------------

Главные отличия запроса и ответа - в первой строке.
Некоторые заголовки тоже отличаются (могут быть только в одном типе пакетов).
200 - ReasonPhrase - статус-фраза

--------------------------------------------------

API - Application-Program Interface - интефрейс взаимодействии программ с приложением.
Программа (в этом контексте) - "центр данных" - общая часть проекта которая сохраняет данные от разных других своих частей (приложений).
Приложение (в этом контексте) - "удалённая"(remote) часть проекта, которая чаще всего, даёт пользователю-человеку интерфейс доступа к программе.
Интефрейс (протокол) их взаимодействий (программы со своими частями) наз. API.

Внедрение API упрощает создание разнообразных приложений (мобильный, браузерный, десктопный),
которые "синхронизованные" между собой относительно данных.
С другой стороны API позволяет другим программам брать участие в информационном обмене.

Использование HTTP протокола для API часто называют веб-API.
Запросы формируют за правилами, привидёнными выше, в разных частях передаются данные, которые конкретизируют детали того, что нужно получить в ответе.
Как формат обменна дынными для веб-API есть например JSON и XML.

API:
 Внешние программы
  -------------------- [Program]             | Program
                  API /    |    \ API              | API(Interface)
                 [Web]     |     [Desktop]   | Applications
                          API                |
                        [Mobile]

API Укр. банка:
https://bank.gov.ua/ua/open-data/api-dev

API CoinCap:
https://docs.coincap.io/

// Convert code to json and json to code
https://json2csharp.com/

--------------------------------------------------

ORM - Object Relation Mapping (~ отображение данных на объекты)

!!! Нельзя передавать ссылку объекта на другую машину (адреса разные)
 {"name"}    {"surname"}
      \  RAM  /                    RAM
      {1001010} --------------> {1001010}
           |                       |
[Program (obj)] --------------> [(obj) App]

Нужно сделать сериализацию/десериализацию.
Сериализация - преобразование объекта в протокольный формат (например JSON).
Десериализация - наоборот.

Суть - с канала (HTTP) приходит строка, нужно его преобразовать в объекты или коллекцию:
1) Узнаём формат всего пакета и его составных частей
    array[61]
    object {
        "r030": 36,
        "txt": "Австралійський долар",
        "rate": 23.0696,
        "cc": "AUD",
        "exchangedate": "23.10.2023"
    }
2) Описываем классы, которые описывают эту структуру:
    class NbuRate
    {
        public int r030 { get; set; }
        public string txt { get; set; } = null!;
        public double rate { get; set; }
        public string cc { get; set; } = null!;
        public string exchangedate { get; set; } = null!;
    }
3) Получаем контент например json:
    using HttpClient httpClient = new();
    string body = await httpClient.GetStringAsync(@"https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json");
4) Преобразовываем строку(json) в список нашего типа(NbuRate):
    JsonSerializer.Deserialize<List<NbuRate>>(body);
